(def a [1 2 3])
(def b [4 5 6])
(map #(list %1 %2) a b)
(use 'gaz.math)
exit
(use 'gaz.math)
(load-file "src/cloj/crossovers/gaz/math/clj")
(load-file "cloj/crossovers/gaz/math/clj")
(load-file "src/cloj/crossovers/gaz/math.clj")
(load-file "crossovers/gaz/math.clj")
(load-file "gaz/math.clj")
exit
(use 'gaz.math)
(require 'gaz.math)
(load-file "math.clj"
)
(load-file "gaz/math.clj"
)
(System/getProperty "java.class.path")
(load-file "gaz/math")
(load-file "gaz/math.clj")
(load-file "src/gaz/math.clj")
(load-file "./src/gaz/math.clj")
(use 'gaz.math)
(load-file "./src/gaz/math.clj")
(load-file "./src/gaz/math.cljd")
exi
exit
(use 'gaz.math)
exit
(use 'gaz.math)
exit
(use 'gaz.math)
exit
(use 'gaz.math)
(load-file "gaz/math.clj")
(load-file "src/gaz/math.clj")
(def x (Vec3. 0 0 0))
(def x (gaz.math/Vec3. 0 0 0))
(def x (math/Vec3. 0 0 0))
(ns 'gaz.math)
(lsns)
(ns-map)
(def x (gaz.math/Vec3. 0 0 0))
(def x (gaz.math/Vec3. 0 0 0i))
gaz.math/zero
(def zz (gaz.math.Plane. gaz.math.zero gaz.math.up)
)
(def zz (gaz.math.Plane. gaz.math/zero gaz.math/up)
)
(def zz (gaz.math.Plane. gaz.math/zero gaz.math/x-axis))
(def zz (gaz.math/mk-plane-equation gaz.math/zero gaz.math/x-axis))
zz
(ns 'gaz.math)
(load-file "src/gaz/math.clj")
(gaz.play/-main)
(-main)
(use 'gaz.math)
(ns gaz.math)
(Ray.)
(use '[clojure.tools.namespace.repl :only (refresh)])
(use 'gaz.math)
(use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
(use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
(def pos (Vec3. 0 0 10))
(ns gaz.math)
(def pos (Vec3. 0 0 10))
(def norm (Vec3. 0 0 1))
(mk-ray pos norm)
(refresh)
(use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
(mk-ray pos norm)
(def pos (Vec3. 0 0 10))
(def norm (Vec3. 0 0 1))
(mk-ray pos norm)
(length-squared norm)
norm
(refresh)
(use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
(length-squared norm)
(def norm (Vec3. 0 0 10))
(def norm (Vec3. 0 0 1))
(length-squared norm)
(def norm (Vec3. 0 1 1))
(length-squared norm)
(refresh)
(use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
(def norm (Vec3. 0 1 1))
(length-squared norm)
(use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
(gaz.play/refresh)
(refresh)
(use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
(gaz.play/refresh)
gaz.play/-main
(gaz.play/-main)
(use 'clojure.tools.namespace.repl)
(refresh)
(dot (Vec3. 1 0 1) (Vec3. 1 0 1))
(length-squared (Vec3. 1 0 1) )
(length (Vec3. 1 0 1) )
(mk-ray (Vec3. 0 0 10) (Vec3. 0 0 1))
(div-scalar 1.0 up)
(div-scalar 1.0 z-axis)
(refresh)
(div-scalar 1.0 z-axis)
(div-scalar 2.0 z-axis)
(div-scalar 3.0 z-axis)
(mk-ray (Vec3. 0 0 10) (Vec3. 0 0 1))
(mk-ray (Vec3. 0 0 10) (Vec3. 0 0 2))
(def test-ray (mk-ray (Vec3. 0 0 10) (Vec3. 0 0 1)))
(def floor-plane (mk-plane-equation zero (Vec3. 0 0 -1)))
(ray-intersection-with-plane test-ray floor-plane)
floor-plane
(ray-distance-to-plane ray plane)
(ray-distance-to-plane test-ray floor-plane)
(refresh)
(gaz.play/refresh)
(use 'clojure.tools.namespace.repl)
(refresh)
(use 'clojure.tools.namespace.repl)
(refresh)
(use 'clojure.tools.namespace.repl)
(refresh)
(use 'clojure.tools.namespace.repl)
(refresh)
(use 'clojure.tools.namespace.repl)
(refresh)
(tester2)
(refresh)
(use 'clojure.tools.namespace.repl)
(refresh)
(tester2)
(use 'clojure.tools.namespace.repl)
(tester2)
(refresh)
(tester2)
(tester)
(tester2)
test-ray
(refresh)
(use 'clojure.tools.namespace.repl)
(refresh)
(tester2)
(tester)
(tester2)
test-ray
floor-plane
(refresh)
(use 'clojure.tools.namespace.repl)
(refresh)
floor-plane
(use 'clojure.tools.namespace.repl)
(refresh)
floor-plane
(tester2)
(tester)
floor-plane
(use 'clojure.tools.namespace.repl)
(tester)
(refresh)
(tester)
(tester2)
(tester)
(use 'clojure.tools.namespace.repl)
(refresh)
(tester)
(tester2)
(use 'clojure.tools.namespace.repl)
(refresh)
(tester2)
(tester)
(def test-ray (mk-ray (Vec3. 0 0 11) (Vec3. 0 0 1)))
(tester)
(tester2)
(tester)
(tester2)
(refresh)
(use 'clojure.tools.namespace.repl)
(refresh)
(tester2)
(tester)
(ns 'gaz.math)
(ns gaz.math)
(tester)
(tester2)
poo
floor-plane
(tester2))
(tester2)
(tester)
(tester2)
(tester)
(ns test.math)
(use gaz.tes-math)
(use gaz.test-math)
(require 'gaz.test-math)
(use 'gaz.test-math)
